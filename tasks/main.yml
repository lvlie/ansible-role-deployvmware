---
# tasks file for ansible-role-deployvmware
- name: Gather info from standalone ESXi server having datacenter as 'ha-datacenter'
  vmware_guest_info:
    hostname: "{{ vcenter_hostname }}"
    username: "{{ vcenter_username }}"
    password: "{{ vcenter_password }}"
    datacenter: ha-datacenter
    validate_certs: no
    name: '{{ inventory_hostname }}'
  delegate_to: localhost
  register: info

- name: Download latest ubuntu 20.04 ova
  get_url:
    url: https://cloud-images.ubuntu.com/focal/current/focal-server-cloudimg-amd64.ova
    dest: ~/Downloads/ubuntu-focal.ova
  delegate_to: localhost
  when: info.results.exists

- name: Deploy template to ESXi
  vmware_deploy_ovf:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    validate_certs: no
    datastore: '{{ vcenter_datastore }}'
    name: '{{ inventory_hostname }}'
    power_on: no
    ovf: ~/Downloads/ubuntu-focal.ova
  delegate_to: localhost
  when: info.results.exists

- name: Configure VM on ESXi from uploaded template
  vmware_guest:
    hostname: '{{ vcenter_hostname }}'
    username: '{{ vcenter_username }}'
    password: '{{ vcenter_password }}'
    esxi_hostname: '{{ esxi_hostname }}'
    validate_certs: no
    folder: '{{ folder }}'
    name: '{{ inventory_hostname }}'
    guest_id: '{{ id }}'
    disk:
    - size_gb: '{{ additional_disk_size }}' 
      type: thin
      datastore: '{{ vcenter_datastore }}'
    networks:
    - name: '{{ network }}'
      ip: '{{ ansible_host }}'
      netmask: '{{ netmask }}'
      gateway: '{{ gateway }}'
      dns_servers:
      - '{{ dns_server }}'
      start_connected: true
    hardware:
      hotadd_cpu: true
      hotremove_cpu: true
      hotadd_memory: true
      memory_mb: '{{ memory }}'
      num_cpus: '{{ vcpu }}'
    customization:
      existing_vm: true
      dns_suffix: '{{ domain_name }}'
      dns_servers:
      - '{{ dns_server }}'
      domain : '{{ domain_name }}'
      hostname: '{{ inventory_hostname }}'
      timezone: '{{ timezone }}'
    wait_for_ip_address: true
    state: '{{ state }}'
  delegate_to: localhost